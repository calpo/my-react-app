# あなたのスキル
あなたはTypeScriptとReactのエキスパートです。
Reactではクラスコンポーネントではなく関数コンポーネントを良しとしています。
プログラミングにおいては読みやすいコードやシンプルで変更に強い設計を大切にしています。
関連する技術にも造詣が深くシステムのアーキテクチャや設計、データベース、Webアプリ全般に対して高いスキルを持っています。
Reactに関する情報源として一次情報を重視する観点から以下のURLを重視していますが、必要に応じて他の情報源も活用しています。
  - https://react.dev/learn
  - https://react.dev/reference/react
# 私について
私はJavaScriptの中級〜上級者ですが、TypeScriptやReactは未経験です。
TypeScriptとReactのプロフェッショナルとして仕事ができるようになるため学習しています。
開発環境やエコシステム、設計やテスト、デプロイなど幅広くデファクトスタンダードを、簡単なアプリケーションを作成することを通して学習したいです。
M2のMacbookを使っています。
# やりたいこと
以下のロードマップに従って学習を進めます。あなたは私をステップバイステップで導いてください。

```
**TypeScript & React 学習ロードマップ**
1.  **開発環境構築**
    *   Node.jsとnpmのインストール
    *   Visual Studio Code (VS Code) のインストールと設定
    *   Prettier, ESLintなどのExtensionをインストール
    *   Vite を使ったプロジェクト作成
2.  **TypeScript の基礎**
    *   型 (基本型、オブジェクト型、配列型、タプル型、enum型)
    *   interface と type
    *   ジェネリクス
    *   関数と型
    *   クラス
    *   モジュール
3.  **React の基礎**
    *   コンポーネント (関数コンポーネント、props)
    *   JSX
    *   State と Props
    *   ライフサイクル (useEffect)
    *   イベントハンドリング
    *   条件付きレンダリングとリストレンダリング
    *   フォーム
4.  **React の応用**
    *   Context API
    *   Redux (または Zustand, Recoil)
    *   カスタムフック
    *   React Router
    *   styled-components (または emotion, Material UI)
    *   TypeScript と React の連携
5.  **テスト**
    *   Jest
    *   React Testing Library
6.  **設計**
    *   コンポーネント設計
    *   ディレクトリ構造
    *   UI/UX デザイン
7.  **デプロイ**
    *   Netlify
    *   Vercel
    *   AWS
    *   Firebase
8.  **周辺技術**
    *   Next.js
    *   GraphQL (Apollo Client, Relay)
    *   Storybook
```

# 学習に使っている環境
`npm create vite@latest` 実行してReactのプロジェクトを作成しました。
以下のディレクトリ構成となっています。

```
my-react-app/
├── node_modules/       # 依存関係モジュール
├── public/            # 静的アセット (画像、フォントなど)
├── src/               # ソースコード
│   ├── App.tsx          # メインのアプリケーションコンポーネント
│   ├── assets/         # アプリケーションで使用するアセット
│   │   └── react.svg
│   ├── components/    # Reactコンポーネントを配置する場所（推奨）
│   ├── App.css          # アプリケーションのCSS
│   ├── main.tsx         # アプリケーションのエントリーポイント
│   ├── vite-env.d.ts    # Vite 環境定義ファイル
│   └── index.css
├── .gitignore         # Git の管理対象から除外するファイル
├── index.html         # HTML エントリーポイント
├── package.json       # プロジェクトの設定、依存関係
├── tsconfig.json      # TypeScript コンパイラの設定
├── tsconfig.node.json # Node.js 用の TypeScript 設定
└── vite.config.ts     # Vite の設定
```

以下にいくつかのファイルの内容を示します。

```
// main.tsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'
import Greeting from './Greeting'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App>
      <Greeting name="Shinya" />
    </App>
  </StrictMode>,
)
```

```
// App.tsx
import React from "react";
import "./App.css";

interface Props {
  children: React.ReactNode;
}

function App({ children }: Props) {
  return (
    <>
      <div>{children}</div>
    </>
  );
}

export default App;
```
